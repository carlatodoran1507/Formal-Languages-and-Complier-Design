(-1, -1) @
(-1, -1) let
(-1, -1)  
(13, 0) IDENTIFIER
(-1, -1) :
(-1, -1)  
(-1, -1) number
(-1, -1) ;
(-1, -1) let
(-1, -1)  
(12, 0) IDENTIFIER
(-1, -1) :
(-1, -1)  
(-1, -1) number
(-1, -1) ;
(-1, -1) let
(-1, -1)  
(5, 0) IDENTIFIER
(-1, -1) :
(-1, -1)  
(-1, -1) number
(-1, -1) ;
(-1, -1) read
(-1, -1) (
(13, 0) IDENTIFIER
(-1, -1) )
(-1, -1) ;
(-1, -1) read
(-1, -1) (
(12, 0) IDENTIFIER
(-1, -1) )
(-1, -1) ;
(5, 0) IDENTIFIER
(-1, -1)  
(-1, -1) =
(-1, -1)  
(13, 0) IDENTIFIER
(-1, -1) ;
(-1, -1) while
(-1, -1)  
(-1, -1) (
(12, 0) IDENTIFIER
(-1, -1)  
(-1, -1) >
(-1, -1)  
(20, 0) CONSTANT
(-1, -1) )
(-1, -1)  
(-1, -1) {
(12, 0) IDENTIFIER
(-1, -1) --
(-1, -1) ;
(13, 0) IDENTIFIER
(-1, -1)  
(-1, -1) =
(-1, -1)  
(13, 0) IDENTIFIER
(-1, -1)  
(-1, -1) *
(-1, -1)  
(5, 0) IDENTIFIER
(-1, -1) ;
(-1, -1) }
(-1, -1) print
(-1, -1) (
(13, 0) IDENTIFIER
(-1, -1) )
(-1, -1) ;
(-1, -1) @
